* Overview

  Essentially, the idea is this: there are human language-like files
  (features) that describe scenarios--pre-conditions, actions, and
  their results; separately, there is code that maps these statements
  to python selenium code and assertions (steps).

  What this gets you is a pretty nice separation between the tests and
  the code. The test language is simple and can be built up in such a
  way that a complete non-programmer can easily write unit tests,
  snapping them together like legos. The developer makes the legos and
  run the tests. With the whole BDD thing there is a lot of kool-aid
  being passed around (actually driving development with this seems a
  bit mad to me), but being able to have a separation of concerns
  between the human language-esque tests and the plumbing will allow
  us to actually build up a body of tests without taking too much away
  from development time.

  For example, for a few of the things we've done in AmiGO so far,
  compare the behave version of the test to the node/mocha version:
 
  - https://github.com/geneontology/amigo/blob/master/selenium/webdriver/05_autocomplete_tests.js
  - https://github.com/geneontology/amigo/blob/master/test-app/behave/05_autocomplete_basic.feature

  the latter being obviously waaay easier for a curator or scientist
  to produce. Here is also data some testing:

  - https://github.com/geneontology/amigo/blob/master/test-app/behave/20_data_basic.feature

  All with a fairly small amount of python code, which a python-smart
  scientist could also help produce:

  - https://github.com/geneontology/amigo/blob/master/test-app/behave/environment.py
  - https://github.com/geneontology/amigo/tree/master/test-app/behave/steps

  (Obviously we could also just query GOlr directly for the tests, but
  this way makes it easier for non-expert users.)
  
  Another nice thing is that gherkin (the language the tests are
  written in) has several runners, so the tests are somewhat portable
  if behave bellies up or is otherwise unsuitable.
  
  The major downside I see is that we have to bring in another
  language for this (python 2.7), and it is a little harder to get
  started than with the node/mocha stuff. That said, since this is
  just local testing, virtualenv
  (https://virtualenv.pypa.io/en/latest/) papers over a lot of the
  issues and is version compatible enough that it will be easy to add
  to our Jenkins machines.

* Running tests
  
** Setup for Ubuntu 14.04 LTS

   Starting from amigo/test-app/behave directory, using Ubuntu 12.04.

   First, setup the python environment in the right place.

   : sudo apt-get -u install python-virtualenv
   : virtualenv `pwd`
   : source bin/activate
   : pip install --upgrade --force-reinstall selenium behave jsonpath-rw

   All of the created files for this are in .gitignore, for both linux
   and windows systems. After this, you can leave the virtual
   environment with:

   : source bin/deactivate

   and reactivate it with:

   : source bin/activate

** The commands

   The branches should contain the correct information, so the basic command is:

  : TARGET="http://amigo.geneontology.org" behave

* Tags

  These are the tags that we're currently using in the tests (in case
  you want to check or remove just a subset).

  - go: GO-specific tests (for things like term existence)
  - data: tests specific to testing the sanity of GO data
