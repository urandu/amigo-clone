{
  "name": "pup-tent",
  "version": "0.9.10",
  "license": "BSD-3-Clause",
  "description": "File caching and template rendering femto-framework using mustache and some assumptions.",
  "author": {
    "name": "Seth Carbon",
    "email": "http://github.com/kltm/pup-tent"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/kltm/pup-tent"
  },
  "keywords": [
    "femto",
    "framework",
    "template",
    "cross-platform",
    "Node.js",
    "RingoJS"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "underscore": "~1.6.0",
    "mustache": "~0.8.2"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "del": "^1.1.1",
    "gulp": "^3.8.11",
    "gulp-bump": "^0.3.0",
    "gulp-git": "^1.2.3",
    "gulp-jsdoc": "^0.1.4",
    "gulp-mocha": "^2.0.1",
    "gulp-pandoc": "^0.2.1",
    "gulp-rename": "^1.2.2",
    "gulp-shell": "^0.4.2",
    "gulp-uglify": "^1.2.0",
    "jsdoc": "^3.3.0",
    "jsdoc-baseline": "git://github.com/hegemonic/jsdoc-baseline.git#74d1dc8075"
  },
  "main": "./lib/pup-tent.js",
  "readme": "# pup-tent\n\nFile caching and template rendering femto-framework using\nmustache and some assumptions.\n\n[On GitHub](https://github.com/berkeleybop/pup-tent)\n \n[NPM](https://www.npmjs.com/package/pup-tent)\n\n[API docs](http://kltm.github.io/pup-tent/doc/index.html)\n      \npup-tent is maintained by\n[Berkeley BOP](https://github.com/berkeleybop)\n&amp;\n[kltm](https://github.com/kltm)\n\n## Overview\n\nPup Tent is a femto-framework for template (Mustache) and static\ncontent delivery for Node.js and RingoJS (beta) web apps.\n\nThe idea is to quickly turn a pile of related JS, template, CSS, and\nstatic files into a whole coherent enough to deliver with a proper\nweb app/routing framework, such as express.\n\nThere are two main aspects to Pup Tent. The first is searching for\nand synchronously caching static content on the filesystem,\n(including caching templates for later use), and then producing\nthose when given the filename key (all filenames must be unique in\nPup Tent). The second is aiding in using a couple of common template\npatterns using Mustache, examples below.\n\n## Usage\n\n### The Basics (kicking the tires, lightly)\n\nThere are other examples in the tests/ directory, but a full\nexample (without using the cache) might look like this.\n\nLets say you have the following files:\n\n- static/frame.tmpl\n- static/content.tmpl\n- static/bar.css\n- static/foo.js\n- static/App.js\n\nThe file content.tmpl looks like:\n\n```\n{{ content }}\n```\n\nAnd the file frame.tmpl looks like:\n\n```html\n<html>\n  <head>\n    <title>{{title}}</title>\n    {{#pup_tent_css_libraries}}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{{{.}}}\">\n    {{/pup_tent_css_libraries}}\n    {{#pup_tent_js_variables}}\n    <script type=\"text/javascript\">var {{name}} = {{{value}}};</script>\n    {{/pup_tent_js_variables}}\n    {{#pup_tent_js_libraries}}\n    <script type=\"text/javascript\" src=\"{{{.}}}\"></script>\n    {{/pup_tent_js_libraries}}\n  </head>\n  <body>\n  {{ &pup_tent_content }}\n  </body>\n</html>\n```\n\nThe easiest way to deploy my App.js using this template and file\nstructure could be something like:\n\n```javascript\nvar pup_tent = require('pup-tent')(['static']);\n```\n\nSet the common variables:\n\n```javascript\npup_tent.set_common('js_vars', {'name': 'foo', 'value': 'bar'});\npup_tent.set_common('js_libs', 'foo.js');\npup_tent.set_common('css_libs', 'bar.css');\n```\n\nSet the variables for just this page:\n\n```javascript\nvar targs = {content: 'bar', title: 'foo', 'pup_tent_js_libraries': ['App.js']};\n```\n\n```javascript\nvar output = pup_tent.render('content.tmpl', targs, 'frame.tmpl');\n```\n\nThis would give output like:\n\n```html\n<html>\n  <head>\n    <title>foo</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"bar.css\">\n    <script type=\"text/javascript\">var foo = \"bar\";</script>\n    <script type=\"text/javascript\" src=\"foo.js\"></script>\n    <script type=\"text/javascript\" src=\"App.js\"></script>\n  </head>\n  <body>\n  bar\n  </body>\n</html>\n```\n\nYou might notice that some of the files are not correctly \"linking\"\nif you view your page in a web browser. On to the next section!\n\n### More Advanced (test drive)\n\nSo far, we've just used it for some simple templating, but what if we\nwant to use the integrated caching mechanism and use it in conjunction\nwith something like express?\n\nA more full-bodied example, using express as an example, might be:\n\n```javascript\nvar us = require('underscore');\nvar express = require('express');\nvar fs = require('fs');\nvar mustache = require('mustache')\nvar pup_tent = require('pup-tent')\n\nvar app = express();\n\n//////\n/// FOLLOW THE EXAMPLE ABOVE FOR REDACTED STUFF HERE ///\n//////\n\n// Pretty much the same as before.\napp.get('/', function(req, res){\n    var targs = {\n\t'title': 'Testing'\n    };\n    var output = pup_tent.render('content.tmpl', targs, 'frame.tmpl');\n    res.send(output);\n});\n\n// Cached static routes, using Pup Tent to easily deliver static docs.\nvar js_re = /\\.js$/;\nvar css_re = /\\.css$/;\nvar html_re = /\\.html$/;\n// Routes for all static cache items at top-level.\nus.each(pup_tent.cached_list('flat'), function(thing){\n    var ctype = null;\n    if( js_re.test(thing) ){\n        ctype = 'text/javascript';\n    }else if( css_re.test(thing) ){\n        ctype = 'text/css';\n    }else if( html_re.test(thing) ){\n        ctype = 'text/html';\n    }\n    \n    // This will skip cached templates.\n    if( ctype !== null ){\n        app.get('/' + thing, function(req, res) {\n            res.setHeader('Content-Type', ctype);\n            res.send(pup_tent.get(thing) );\n        });\n    }\n});\n\nvar server = app.listen(3333, function() {\n    console.log('Starting at http://localhost:' +\n\t\tserver.address().port);\n});\n```\n\nSince always caching can be a bit annoying when developing\nJavaScript/CSS heavy websites, there is also a use_cache_p() function\nthat can be used to toggle whether Pup Tent returns to the filesystem\nevery time or uses the internal cache. For more information about\neverything, see the API docs (linked at the end).\n\n### Special variables\n\nThe special stack variables are:\n\n- css_libs: will map to pup_tent_css_libraries\n- js_vars: will map to pup_tent_js_variables\n- js_libs: will map to pup_tent_js_libraries\n\nThe special template variables are:\n    \n- pup_tent_css_libraries: list of CSS files to use\n- pup_tent_js_libraries: list of JS files to use\n- pup_tent_js_variables: list of name/value objects to convert to vaiables\n- pup_tent_content: meant for use in _base_tmpl_name_ to embed one template in another\n\n## Tests\n\n### Node.js\n\n    Given the right environment, the tests can be easily run from the\n    command line using the gulpfile.js.\n\n```bash\ngulp test\n```\n\n### RingoJS\n\nThe RingoJS tests are not integrated with the Makefile (yet), but\ncan be run from the command line interface like:\n\n```bash\nringo -m ./lib -m ./node_modules/underscore/ -m node_modules/mustache tests/full-tmpl.js.tests\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kltm/pup-tent/issues"
  },
  "homepage": "https://github.com/kltm/pup-tent",
  "_id": "pup-tent@0.9.10",
  "dist": {
    "shasum": "75910068f44c682978de70f9fa2ab5a8fdba7283"
  },
  "_from": "pup-tent@0.9.10",
  "_resolved": "https://registry.npmjs.org/pup-tent/-/pup-tent-0.9.10.tgz"
}
