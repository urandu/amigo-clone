{
  "name": "gl-vec3",
  "version": "1.0.3",
  "description": "gl-matrix's vec3, split into smaller pieces",
  "main": "index.js",
  "license": {
    "type": "zlib",
    "url": "http://github.com/stackgl/gl-vec3/blob/master/LICENSE.md"
  },
  "contributors": [
    {
      "name": "Brandon Jones",
      "email": "tojiro@gmail.com"
    },
    {
      "name": "Colin MacKenzie IV",
      "email": "sinisterchipmunk@gmail.com"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "dox": "git://github.com/hughsk/dox#api-context"
  },
  "scripts": {
    "get-docs": "cat *.js | dox --api"
  },
  "keywords": [
    "gl-matrix",
    "matrix",
    "math",
    "gl",
    "vec3",
    "vec",
    "3d",
    "vector",
    "maths",
    "add",
    "angle",
    "clone",
    "copy",
    "create",
    "cross",
    "distance",
    "divide",
    "dot",
    "forEach",
    "fromValues",
    "inverse",
    "length",
    "lerp",
    "max",
    "min",
    "multiply",
    "negate",
    "normalize",
    "random",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scaleAndAdd",
    "set",
    "squaredDistance",
    "squaredLength",
    "subtract",
    "transformMat3",
    "transformMat4",
    "transformQuat"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/gl-vec3.git"
  },
  "homepage": "https://github.com/stackgl/gl-vec3",
  "bugs": {
    "url": "https://github.com/stackgl/gl-vec3/issues"
  },
  "readme": "# gl-vec3\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nPart of a fork of [@toji](http://github.com/toji)'s\n[gl-matrix](http://github.com/toji/gl-matrix) split into smaller pieces: this\npackage contains `glMatrix.vec3`.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-vec3.png)](https://nodei.co/npm/gl-vec3/)\n\n### `vec3 = require('gl-vec3')`\n\nWill load all of the module's functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.\n\nFor example, the following are equivalent:\n\n``` javascript\nvar scale = require('gl-vec3').scale\nvar scale = require('gl-vec3/scale')\n```\n\n## API\n\n  - [add()](#addoutvec3avec3bvec3)\n  - [angle()](#angleavec3bvec3)\n  - [clone()](#cloneavec3)\n  - [copy()](#copyoutvec3avec3)\n  - [create()](#create)\n  - [cross()](#crossoutvec3avec3bvec3)\n  - [distance()](#distanceavec3bvec3)\n  - [divide()](#divideoutvec3avec3bvec3)\n  - [dot()](#dotavec3bvec3)\n  - [forEach()](#foreachaarraystridenumberoffsetnumbercountnumberfnfunctionargobject)\n  - [fromValues()](#fromvaluesxnumberynumberznumber)\n  - [inverse()](#inverseoutvec3avec3)\n  - [length()](#lengthavec3)\n  - [lerp()](#lerpoutvec3avec3bvec3tnumber)\n  - [max()](#maxoutvec3avec3bvec3)\n  - [min()](#minoutvec3avec3bvec3)\n  - [multiply()](#multiplyoutvec3avec3bvec3)\n  - [negate()](#negateoutvec3avec3)\n  - [normalize()](#normalizeoutvec3avec3)\n  - [random()](#randomoutvec3scalenumber)\n  - [rotateX()](#rotatexoutvec3avec3bvec3cnumber)\n  - [rotateY()](#rotateyoutvec3avec3bvec3cnumber)\n  - [rotateZ()](#rotatezoutvec3avec3bvec3cnumber)\n  - [scale()](#scaleoutvec3avec3bnumber)\n  - [scaleAndAdd()](#scaleandaddoutvec3avec3bvec3scalenumber)\n  - [set()](#setoutvec3xnumberynumberznumber)\n  - [squaredDistance()](#squareddistanceavec3bvec3)\n  - [squaredLength()](#squaredlengthavec3)\n  - [subtract()](#subtractoutvec3avec3bvec3)\n  - [transformMat3()](#transformmat3outvec3avec3mmat4)\n  - [transformMat4()](#transformmat4outvec3avec3mmat4)\n  - [transformQuat()](#transformquatoutvec3avec3qquat)\n\n## add(out:vec3, a:vec3, b:vec3)\n\n  Adds two vec3's\n\n## angle(a:vec3, b:vec3)\n\n  Get the angle between two 3D vectors\n\n## clone(a:vec3)\n\n  Creates a new vec3 initialized with values from an existing vector\n\n## copy(out:vec3, a:vec3)\n\n  Copy the values from one vec3 to another\n\n## create()\n\n  Creates a new, empty vec3\n\n## cross(out:vec3, a:vec3, b:vec3)\n\n  Computes the cross product of two vec3's\n\n## distance(a:vec3, b:vec3)\n\n  Calculates the euclidian distance between two vec3's\n\n## divide(out:vec3, a:vec3, b:vec3)\n\n  Divides two vec3's\n\n## dot(a:vec3, b:vec3)\n\n  Calculates the dot product of two vec3's\n\n## forEach(a:Array, stride:Number, offset:Number, count:Number, fn:Function, [arg]:Object)\n\n  Perform some operation over an array of vec3s.\n\n## fromValues(x:Number, y:Number, z:Number)\n\n  Creates a new vec3 initialized with the given values\n\n## inverse(out:vec3, a:vec3)\n\n  Returns the inverse of the components of a vec3\n\n## length(a:vec3)\n\n  Calculates the length of a vec3\n\n## lerp(out:vec3, a:vec3, b:vec3, t:Number)\n\n  Performs a linear interpolation between two vec3's\n\n## max(out:vec3, a:vec3, b:vec3)\n\n  Returns the maximum of two vec3's\n\n## min(out:vec3, a:vec3, b:vec3)\n\n  Returns the minimum of two vec3's\n\n## multiply(out:vec3, a:vec3, b:vec3)\n\n  Multiplies two vec3's\n\n## negate(out:vec3, a:vec3)\n\n  Negates the components of a vec3\n\n## normalize(out:vec3, a:vec3)\n\n  Normalize a vec3\n\n## random(out:vec3, [scale]:Number)\n\n  Generates a random vector with the given scale\n\n## rotateX(out:vec3, a:vec3, b:vec3, c:Number)\n\n  Rotate a 3D vector around the x-axis\n\n## rotateY(out:vec3, a:vec3, b:vec3, c:Number)\n\n  Rotate a 3D vector around the y-axis\n\n## rotateZ(out:vec3, a:vec3, b:vec3, c:Number)\n\n  Rotate a 3D vector around the z-axis\n\n## scale(out:vec3, a:vec3, b:Number)\n\n  Scales a vec3 by a scalar number\n\n## scaleAndAdd(out:vec3, a:vec3, b:vec3, scale:Number)\n\n  Adds two vec3's after scaling the second operand by a scalar value\n\n## set(out:vec3, x:Number, y:Number, z:Number)\n\n  Set the components of a vec3 to the given values\n\n## squaredDistance(a:vec3, b:vec3)\n\n  Calculates the squared euclidian distance between two vec3's\n\n## squaredLength(a:vec3)\n\n  Calculates the squared length of a vec3\n\n## subtract(out:vec3, a:vec3, b:vec3)\n\n  Subtracts vector b from vector a\n\n## transformMat3(out:vec3, a:vec3, m:mat4)\n\n  Transforms the vec3 with a mat3.\n\n## transformMat4(out:vec3, a:vec3, m:mat4)\n\n  Transforms the vec3 with a mat4.\n  4th vector component is implicitly '1'\n\n## transformQuat(out:vec3, a:vec3, q:quat)\n\n  Transforms the vec3 with a quat\n\n## License\n\n[zlib](http://en.wikipedia.org/wiki/Zlib_License). See [LICENSE.md](https://github.com/stackgl/gl-vec3/blob/master/LICENSE.md) for details.",
  "readmeFilename": "README.md",
  "_id": "gl-vec3@1.0.3",
  "dist": {
    "shasum": "0bf105a162ca61a645f2174148063f6e0fd16a48"
  },
  "_from": "gl-vec3@^1.0.2",
  "_resolved": "https://registry.npmjs.org/gl-vec3/-/gl-vec3-1.0.3.tgz"
}
