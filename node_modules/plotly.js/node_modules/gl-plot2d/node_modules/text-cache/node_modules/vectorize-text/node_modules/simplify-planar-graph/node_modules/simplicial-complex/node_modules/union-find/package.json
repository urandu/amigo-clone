{
  "name": "union-find",
  "version": "0.0.4",
  "description": "A union-find data structure for maintaining disjoint sets.",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/union-find.git"
  },
  "keywords": [
    "union",
    "find",
    "link",
    "disjoint",
    "set",
    "connected",
    "component",
    "graph"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "8fbd75feecd9d7154f4c2ff21754f483ad07ccab",
  "readme": "`union-find`\n==========\n\nA basic union-find data structure for node.js.  For more information, see wikipdia:\n\n[Disjoint Set Datastructures](http://en.wikipedia.org/wiki/Disjoint-set_data_structure)\n\n\nUsage\n=====\nHere is an example showing how to do connected component labelling.  Assume we are given a graph with `VERTEX_COUNT` vertices and a list of edges stored in array represented by pairs of vertex indices:\n\n    //Import data structure\n    var UnionFind = require('union-find');\n    \n    //Link all the nodes together\n    var forest = new UnionFind(VERTEX_COUNT);\n    for(var i=0; i<edges.length; ++i) {\n      forest.link(edges[i][0], edges[i][1]);\n    }\n    \n    //Label components\n    var labels = new Array(VERTEX_COUNT);\n    for(var i=0; i<VERTEX_COUNT; ++i) {\n      labels[i] = forest.find(i);\n    }\n\nInstallation\n============\n\n    npm install union-find\n    \n    \nAcknowledgements\n================\n(c) 2013 Mikola Lysenko.  MIT License\n\n",
  "bugs": {
    "url": "https://github.com/mikolalysenko/union-find/issues"
  },
  "homepage": "https://github.com/mikolalysenko/union-find",
  "_id": "union-find@0.0.4",
  "dist": {
    "shasum": "cacd0226c4628eb53d7445e34e4b6d33030b6726"
  },
  "_from": "union-find@~0.0.3",
  "_resolved": "https://registry.npmjs.org/union-find/-/union-find-0.0.4.tgz"
}
