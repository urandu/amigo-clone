{
  "name": "glslify-deps",
  "version": "1.3.0",
  "scripts": {
    "test": "node test | tap-spec",
    "coverage": "istanbul cover test/index.js && http-server coverage/lcov-report/glslify-deps"
  },
  "dependencies": {
    "events": "^1.0.2",
    "findup": "^0.1.5",
    "glsl-resolve": "0.0.1",
    "glsl-tokenizer": "^2.0.0",
    "graceful-fs": "^4.1.2",
    "inherits": "^2.0.1",
    "map-limit": "0.0.1",
    "resolve": "^1.0.0"
  },
  "devDependencies": {
    "glsl-random": "0.0.4",
    "glslify-hex": "^2.0.0",
    "istanbul": "^0.3.5",
    "tap-spec": "^4.1.1",
    "tape": "^3.0.2"
  },
  "description": "Walk the dependency graph of a glslify shader.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stackgl/glslify-deps.git"
  },
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughsk.io/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/stackgl/glslify-deps/issues"
  },
  "homepage": "https://github.com/stackgl/glslify-deps#readme",
  "readme": "# glslify-deps\n\nWalk the dependency graph of a [glslify](http://github.com/stackgl/glslify)\nshader.\n\n`glslify-deps` is responsible for resolving your shader's dependencies and\napplying their transforms before the actual source modification occurs. You may\nnotice some parallels here with [browserify](http://browserify.org)'s\n[module-deps](http://github.com/substack/module-deps) package.\n\nWhile `glslify-deps` is an \"internal\" package for `glslify`, it may be useful\nto use this package directly in specific cases, e.g. building a file tree\nserver-side but bundling the final shader on the client.\n\n## Module API\n\nThere is an asynchronous and a synchronous API:\n\n``` js\nvar glslifyDeps = require('glslify-deps')\nvar glslifyDepsSync = require('glslify-deps/sync')\n```\n\nThe asynchronous API is documented below. For every method in the asychronous\nAPI, instead of a `callback(err, result)`, the result is available as the return\nvalue of the method.\n\n### `depper = glslifyDeps([options])`\n\nCreates a fresh `glslify-deps` instance. Accepts the following options:\n\n* `cwd`: the current working directory to resolve relative file paths from.\n* `readFile`: pass in a custom function reading files.\n* `resolve`: pass in a custom function for resolving require calls. It has\n  the same signature as [glsl-resolve](http://github.com/hughsk/glsl-resolve).\n* `files`: a filename/source object mapping of files to prepopulate\n  the file cache with. Useful for overriding particular file paths manually,\n  most notably the \"entry\" file.\n\n### `depper.transform(transform, [options])`\n\nAdds a new transform â€“ should be used before calling `depper.add`.\n\n`transform` may either be a string (which is resolved like a `require` call),\nor a function. More information on transforms can be found below.\n\n### `depper.add(filename, [callback])`\n\nAdds a new file to the dependency graph.\n\n### `depper.inline(source, basedir, [callback])`\n\nAdds a new inline file to the dependency graph, where `source` is the GLSL\nsource to include and `basedir` is the directory to pretend it's being\ncreated in. A `basedir` is required to properly resolve requires and transforms,\nand defaults to `process.cwd()`.\n\n### `depper.on('file', cb(filename))`\n\nEmitted whenever a new file has been included in the dependency graph.\n\n## Example Output\n\n``` json\n[\n  {\n    \"id\": 0,\n    \"deps\": { \"glsl-random\": 1 },\n    \"file\": \"index.glsl\",\n    \"source\": \"precision mediump float;\\n#pragma glslify: random = require(glsl-random)\\n\",\n    \"entry\": true\n  },\n  {\n    \"id\": 1,\n    \"deps\": {},\n    \"file\": \"node_modules/glsl-random/index.glsl\",\n    \"source\": \"highp float random(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n#pragma glslify: export(random)\",\n    \"entry\": false\n  }\n]\n```\n\n## Transform API\n\nThe transform API has changed since glslify 1.0 to make it more \"vanilla\".\n\nWith the asynchronous API, transforms have this signature:\n\n``` javascript\nmodule.exports = function(file, source, options, done) {\n  done(null, source.toUpperCase())\n}\n```\n\nand using the synchronous API, transforms have this signature:\n\n``` javascript\nmodule.exports.sync = function(file, source, options) {\n  return source.toUpperCase()\n}\n```\n\nFor an example that is compatible with both the async and sync APIs, here's\n[glslify-hex](http://github.com/hughsk/glslify-hex)\nrewritten using the new API:\n\n``` javascript\nvar through = require('through')\n\nvar regexLong  = /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/gi\nvar regexShort = /#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/gi\n\nmodule.exports = transform\nmodule.exports.sync = transform\n\nfunction transform(filename, src, opts, done) {\n  src = src.replace(regexShort, function(whole, r, g, b, a) {\n    return !a\n      ? '#' + r + r + g + g + b + b\n      : '#' + r + r + g + g + b + b + a + a\n  }).replace(regexLong, function(whole, r, g, b, a) {\n    r = makeFloat(parseInt(r, 16) / 255)\n    g = makeFloat(parseInt(g, 16) / 255)\n    b = makeFloat(parseInt(b, 16) / 255)\n    a = makeFloat(parseInt(a, 16) / 255)\n\n    return isNaN(a)\n      ? 'vec3('+[r,g,b].join(',')+')'\n      : 'vec4('+[r,g,b,a].join(',')+')'\n  })\n\n  if (typeof done === 'function') done(null, src)\n  return src\n}\n\nfunction makeFloat(n) {\n  return String(n).indexOf('.') === -1\n    ? n + '.'\n    : n\n}\n```\n\n## Transforms in `package.json`\n\nTransforms now support options specified in `package.json`:\n\n``` json\n{\n  \"glslify\": {\n    \"transform\": [\n       \"glslify-hex\",\n      [\"glslify-optimize\", { \"mangle\": true }]\n    ]\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "glslify-deps@1.3.0",
  "dist": {
    "shasum": "e82b4a9ad5703fb60cf2e9d93f8e8606a8c44493"
  },
  "_from": "glslify-deps@^1.2.0",
  "_resolved": "https://registry.npmjs.org/glslify-deps/-/glslify-deps-1.3.0.tgz"
}
