{
  "name": "gl-surface3d",
  "version": "1.3.0",
  "description": "Renders parametric surfaces in 3D",
  "main": "surface.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "binary-search-bounds": "^1.0.0",
    "bit-twiddle": "^1.0.2",
    "colormap": "^2.1.0",
    "dup": "^1.0.0",
    "gl-buffer": "^2.0.3",
    "gl-mat4": "^1.0.0",
    "gl-shader": "^4.2.0",
    "gl-texture2d": "^2.0.0",
    "gl-vao": "^1.1.1",
    "glsl-specular-beckmann": "^1.1.2",
    "glslify": "^2.1.2",
    "ndarray": "^1.0.16",
    "ndarray-gradient": "^1.0.0",
    "ndarray-ops": "^1.2.1",
    "ndarray-pack": "^1.0.1",
    "ndarray-scratch": "^1.1.1",
    "surface-nets": "^1.0.2",
    "typedarray-pool": "^1.0.0"
  },
  "devDependencies": {
    "dirichlet": "^1.0.1",
    "game-shell-orbit-camera": "^1.0.0",
    "gl-axes3d": "^1.2.4",
    "gl-matrix": "^2.3.2",
    "gl-now": "^1.4.0",
    "gl-select-static": "^2.0.2",
    "gl-spikes3d": "^1.0.5",
    "ndarray-fill": "^1.0.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "beefy --open --live example/example.js"
  },
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gl-vis/gl-surface3d.git"
  },
  "keywords": [
    "plot",
    "surface",
    "webgl",
    "visualization",
    "surf",
    "height",
    "field"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gl-vis/gl-surface3d/issues"
  },
  "homepage": "https://github.com/gl-vis/gl-surface3d",
  "readme": "gl-surface3d\r\n===============\r\n3D parametric surface plotting, compatible with [gl-vis](http://github.com/gl-vis).\r\n\r\n# Example\r\n\r\n```javascript\r\nvar createScene       = require('gl-plot3d')\r\nvar createSurfacePlot = require('gl-surface3d')\r\nvar ndarray           = require('ndarray')\r\nvar fill              = require('ndarray-fill')\r\nvar diric             = require('dirichlet')\r\n\r\nvar scene = createScene()\r\n\r\n//Create field\r\nvar field = ndarray(new Float32Array(512*512), [512,512])\r\nfill(field, function(x,y) {\r\n  return 128 * diric(10, 10.0*(x-256)/512) * diric(10, 10.0*(y-256)/512)\r\n})\r\n\r\n//Create surface plot\r\nvar surface = createSurfacePlot({\r\n  gl:    scene.gl,\r\n  field: field\r\n})\r\n\r\nscene.add(surface)\r\n```\r\n\r\nHere is what this should look like:\r\n\r\n<img src=\"plot.png\">\r\n\r\n[Test it in your browser (requires WebGL)](http://gl-vis.github.io/gl-surface3d/)\r\n\r\n# Install\r\n\r\n```\r\nnpm install gl-surface3d\r\n```\r\n\r\n# Basic Interface\r\n\r\n## Constructor\r\n\r\n#### `var surface = require('gl-surface3d')(params)`\r\nCreates a surface plot object.  `params` is an object with any of the following parameters\r\n\r\n* `gl` is a WebGL context\r\n* `field` a new 2D field encoded as an ndarray\r\n* `coords` is an array of 3 2D fields, each encoded as ndarrays (for parameteric surfaces)\r\n* `intensity` a 2D intensity field (defaults to `field` or `coords[2] is not present)\r\n* `colormap` the name of the new color map for the surface (see list of names in `colormap` [docs](https://github.com/bpostlethwaite/colormap))\r\n* `intensityBounds` sets the intensity range for the colormap\r\n* `ticks` is a pair of arrays of ticks representing the spacing of the points for the axes of the surface\r\n* `showSurface` if set, draw the surface\r\n* `showContour` if set, draw contour lines\r\n* `contourWidth` the width fo the contour lines\r\n* `contourTint` the amount of tint of the contour lines\r\n* `contourColor` the color of the contour line tint\r\n* `levels` an array of arrays representing the level of the isolines.\r\n* `dynamicWidth` the width of the dynamic isolines\r\n* `dynamicColors` the color of the dynamic isolines\r\n* `dynamicTint` the tint of the dynamic isolines\r\n* `vertexColor` interpolate color in fragment or vertex shader, useful for discontinuous functions ([ref](https://github.com/plotly/plotly.js/issues/940))\r\n\r\n\r\n## Methods\r\n\r\n#### `surface.update(params)`\r\nModify the surface.  `params` is an object with the same properties as the constructor\r\n\r\n\r\n# License\r\n(c) 2014-2015 Mikola Lysenko. MIT License.\r\n",
  "readmeFilename": "README.md",
  "_id": "gl-surface3d@1.3.0",
  "dist": {
    "shasum": "6545c9c18d8f514dbefbf271e31426e48597f359"
  },
  "_from": "gl-surface3d@^1.2.3",
  "_resolved": "https://registry.npmjs.org/gl-surface3d/-/gl-surface3d-1.3.0.tgz"
}
