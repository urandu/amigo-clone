{
  "name": "vectorize-text",
  "version": "3.0.2",
  "description": "Render a string to a vectorized cell complex",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "cdt2d": "^1.0.0",
    "clean-pslg": "^1.1.0",
    "ndarray": "^1.0.11",
    "planar-graph-to-polyline": "^1.0.0",
    "simplify-planar-graph": "^2.0.1",
    "surface-nets": "^1.0.0",
    "triangulate-polyline": "^1.0.0"
  },
  "devDependencies": {
    "get-pixels": "^3.1.0",
    "ndarray-imshow": "^1.0.0",
    "save-pixels": "^2.2.0",
    "tape": "^3.0.3"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/vectorize-text.git"
  },
  "keywords": [
    "vector",
    "text",
    "font",
    "rendering",
    "svg",
    "glyph"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/vectorize-text/issues"
  },
  "homepage": "https://github.com/mikolalysenko/vectorize-text",
  "readme": "vectorize-text\n==============\nConvert a string of text into a vectorized geometric representation.  Works in both node.js and [browserify](http://browserify.org/).\n\n# Example\n\nThis module is capable of outputting geometry in several formats.\n\n### Planar graphs\n\nThe default (and fastest) output from the module is a planar graph:\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar graph = vectorizeText(\"Hello world! 你好\", {\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >']\ngraph.edges.forEach(function(e) {\n  var p0 = graph.positions[e[0]]\n  var p1 = graph.positions[e[1]]\n  svg.push('<line x1=\"' + p0[0] + '\" y1=\"' + p0[1] +\n    '\" x2=\"' + p1[0] + '\" y2=\"' + p1[1] +\n    '\" stroke-width=\"1\" stroke=\"black\" />')\n})\nsvg.push(\"</svg>\")\n\nconsole.log(svg.join(\"\"))\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-graph.svg\">\n\n### Polygons\n\nYou can also configure the module to emit polygons instead:\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar polygons = vectorizeText(\"Hello world! 你好\", {\n  polygons: true,\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = []\nsvg.push('<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >')\npolygons.forEach(function(loops) {\n  svg.push('<path d=\"')\n  loops.forEach(function(loop) {\n    var start = loop[0]\n    svg.push('M ' + start[0] + ' ' + start[1])\n    for(var i=1; i<loop.length; ++i) {\n      var p = loop[i]\n      svg.push('L ' + p[0] + ' ' + p[1])\n    }\n    svg.push('L ' + start[0] + ' ' + start[1])\n  })\n  svg.push('\" fill-rule=\"even-odd\" stroke-width=\"1\" fill=\"red\"></path>')\n})\nsvg.push('</svg>')\n\nconsole.log(svg)\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-polygon.svg\">\n\n\n### Triangulations\n\nFinally, the module can output a triangulation (which is compatible with WebGL for example):\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar complex = vectorizeText(\"Hello world! 你好\", {\n  triangles: true,\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >']\ncomplex.cells.forEach(function(c) {\n  for(var j=0; j<3; ++j) {\n    var p0 = complex.positions[c[j]]\n    var p1 = complex.positions[c[(j+1)%3]]\n    svg.push('<line x1=\"' + p0[0] + '\" y1=\"' + p0[1] +\n      '\" x2=\"' + p1[0] + '\" y2=\"' + p1[1] +\n      '\" stroke-width=\"1\" stroke=\"black\" />')\n  }\n})\nsvg.push(\"</svg>\")\n\nconsole.log(svg)\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-triangles.svg\">\n\n# Install\n\n```sh\nnpm install vectorize-text\n```\n\n# API\n\n#### `require(\"vectorize-text\")(string[,options])`\nRenders a string to a 2D cell complex\n\n* `string` is a string of text (single line)\n* `options` is an optional object of parameters\n\n    + `options.font` is the font to use (default: `\"normal\"`)\n    + `options.triangles` if set, then output a triangulation\n    + `options.polygons` if set, output a list of polygons\n    + `options.textBaseline` determines the baseline, same semantics as the canvas [textBaseline](https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes) property.  Default: `\"alphabetic\"`\n    + `options.textAlign` determines the alignment for the text, same semantics as canvas [textAlign](https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes).  Default: `\"start\"`\n    + `options.lineHeight` determines the height of a line.  Default: `1.0`\n    + `options.width` determines the width of the text, overrides `lineHeight` if specified\n    + `options.height` determines the height of the text, overrides `lineHeight` if specified\n    + `options.orientation` determines the orientation of any output triangles/polygon curves.  Must be either `\"cw\"` for clockwise or `\"ccw\"` for counter clockwise.  Default is `\"cw\"`.\n    + `options.canvas` an optional canvas element\n    + `options.context` an optional canvas 2D context\n\n**Returns** The returned value depends on the type of geometry\n\n* *Planar graph*: This is the fastest output format. A JSON object encoding the embedding of an oriented planar graph, with the following properties:\n\n    + `edges` are the edges of the graph\n    + `positions` are the positions\n\n* *Polygon list*: A list of complex polygons encoded as arrays of positions.  This format is most suitable for SVG and GeoJSON output\n\n* *Triangulation*: This format may be most suitable for WebGL/rendering applications. A 2D oriented simplicial complex encoded as a list of cells and positions, represented by a JSON object with two properties\n\n    + `cells` are the faces of the triangulation, encoded as triples of indices into the vertex array\n    + `positions` are the positions of the vertices in the triangulation\n\n**Note** In node.js, this library requires Cairo.  For more information on how to set this up, look at the documentation for the [canvas module](https://www.npmjs.org/package/canvas).\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License\n",
  "readmeFilename": "README.md",
  "_id": "vectorize-text@3.0.2",
  "_from": "vectorize-text@^3.0.0"
}
