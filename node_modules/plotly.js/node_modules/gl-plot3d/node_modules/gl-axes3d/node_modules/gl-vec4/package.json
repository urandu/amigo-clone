{
  "name": "gl-vec4",
  "version": "1.0.1",
  "description": "gl-matrix's vec4, split into smaller pieces",
  "main": "index.js",
  "scripts": {
    "get-docs": "cat *.js | dox --api"
  },
  "dependencies": {},
  "devDependencies": {
    "dox": "git://github.com/hughsk/dox#api-context"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/gl-vec4.git"
  },
  "license": {
    "type": "Zlib",
    "url": "http://github.com/stackgl/gl-mat4/blob/master/LICENSE.md"
  },
  "contributors": [
    {
      "name": "Brandon Jones",
      "email": "tojiro@gmail.com"
    },
    {
      "name": "Colin MacKenzie IV",
      "email": "sinisterchipmunk@gmail.com"
    }
  ],
  "keywords": [
    "ecosystem:stackgl",
    "gl-matrix",
    "matrix",
    "math",
    "gl",
    "mat4",
    "mat4x4",
    "4x4",
    "vectors",
    "vec4",
    "color",
    "mat",
    "vector",
    "maths"
  ],
  "homepage": "https://github.com/stackgl/gl-vec4",
  "bugs": {
    "url": "https://github.com/stackgl/gl-vec4/issues"
  },
  "readme": "# gl-vec4\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nPart of a fork of [@toji](http://github.com/toji)'s\n[gl-matrix](http://github.com/toji/gl-matrix) split into smaller pieces: this\npackage contains `glMatrix.vec4`.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-vec4.png)](https://nodei.co/npm/gl-vec4/)\n\n### `vec4 = require('gl-vec4')`\n\nWill load all of the module's functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.\n\nFor example, the following are equivalent:\n\n``` javascript\nvar scale = require('gl-vec4').scale\nvar scale = require('gl-vec4/scale')\n```\n\n## API\n\n  - [add()](#addoutvec4-avec4-bvec4)\n  - [clone()](#cloneavec4)\n  - [copy()](#copyoutvec4-avec4)\n  - [create()](#create)\n  - [distance()](#distanceavec4-bvec4)\n  - [divide()](#divideoutvec4-avec4-bvec4)\n  - [dot()](#dotavec4-bvec4)\n  - [fromValues()](#fromvaluesxnumber-ynumber-znumber-wnumber)\n  - [inverse()](#inverseoutvec4-avec4)\n  - [length()](#lengthavec4)\n  - [lerp()](#lerpoutvec4-avec4-bvec4-tnumber)\n  - [max()](#maxoutvec4-avec4-bvec4)\n  - [min()](#minoutvec4-avec4-bvec4)\n  - [multiply()](#multiplyoutvec4-avec4-bvec4)\n  - [negate()](#negateoutvec4-avec4)\n  - [normalize()](#normalizeoutvec4-avec4)\n  - [random()](#randomoutvec4-scalenumber)\n  - [scale()](#scaleoutvec4-avec4-bnumber)\n  - [scaleAndAdd()](#scaleandaddoutvec4-avec4-bvec4-scalenumber)\n  - [set()](#setoutvec4-xnumber-ynumber-znumber-wnumber)\n  - [squaredDistance()](#squareddistanceavec4-bvec4)\n  - [squaredLength()](#squaredlengthavec4)\n  - [subtract()](#subtractoutvec4-avec4-bvec4)\n  - [transformMat4()](#transformmat4outvec4-avec4-mmat4)\n  - [transformQuat()](#transformquatoutvec4-avec4-qquat)\n\n## add(out:vec4, a:vec4, b:vec4)\n\n  Adds two vec4's\n\n## clone(a:vec4)\n\n  Creates a new vec4 initialized with values from an existing vector\n\n## copy(out:vec4, a:vec4)\n\n  Copy the values from one vec4 to another\n\n## create()\n\n  Creates a new, empty vec4\n\n## distance(a:vec4, b:vec4)\n\n  Calculates the euclidian distance between two vec4's\n\n## divide(out:vec4, a:vec4, b:vec4)\n\n  Divides two vec4's\n\n## dot(a:vec4, b:vec4)\n\n  Calculates the dot product of two vec4's\n\n## fromValues(x:Number, y:Number, z:Number, w:Number)\n\n  Creates a new vec4 initialized with the given values\n\n## inverse(out:vec4, a:vec4)\n\n  Returns the inverse of the components of a vec4\n\n## length(a:vec4)\n\n  Calculates the length of a vec4\n\n## lerp(out:vec4, a:vec4, b:vec4, t:Number)\n\n  Performs a linear interpolation between two vec4's\n\n## max(out:vec4, a:vec4, b:vec4)\n\n  Returns the maximum of two vec4's\n\n## min(out:vec4, a:vec4, b:vec4)\n\n  Returns the minimum of two vec4's\n\n## multiply(out:vec4, a:vec4, b:vec4)\n\n  Multiplies two vec4's\n\n## negate(out:vec4, a:vec4)\n\n  Negates the components of a vec4\n\n## normalize(out:vec4, a:vec4)\n\n  Normalize a vec4\n\n## random(out:vec4, [scale]:Number)\n\n  Generates a random vector with the given scale\n\n## scale(out:vec4, a:vec4, b:Number)\n\n  Scales a vec4 by a scalar number\n\n## scaleAndAdd(out:vec4, a:vec4, b:vec4, scale:Number)\n\n  Adds two vec4's after scaling the second operand by a scalar value\n\n## set(out:vec4, x:Number, y:Number, z:Number, w:Number)\n\n  Set the components of a vec4 to the given values\n\n## squaredDistance(a:vec4, b:vec4)\n\n  Calculates the squared euclidian distance between two vec4's\n\n## squaredLength(a:vec4)\n\n  Calculates the squared length of a vec4\n\n## subtract(out:vec4, a:vec4, b:vec4)\n\n  Subtracts vector b from vector a\n\n## transformMat4(out:vec4, a:vec4, m:mat4)\n\n  Transforms the vec4 with a mat4.\n\n## transformQuat(out:vec4, a:vec4, q:quat)\n\n  Transforms the vec4 with a quat\n\n## License\n\nMIT. See [LICENSE.md](http://github.com/stackgl/gl-vec4/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "_id": "gl-vec4@1.0.1",
  "dist": {
    "shasum": "0f5360da1ca8c07e226d08675e984e649d14fc00"
  },
  "_from": "gl-vec4@^1.0.1",
  "_resolved": "https://registry.npmjs.org/gl-vec4/-/gl-vec4-1.0.1.tgz"
}
