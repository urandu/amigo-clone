{
  "name": "3d-view-controls",
  "version": "2.1.1",
  "description": "A 3D camera with hooks for input handling",
  "main": "camera.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "3d-view": "^2.0.0",
    "mouse-wheel": "^1.0.2",
    "right-now": "^1.0.0",
    "mouse-change": "^1.1.1"
  },
  "devDependencies": {
    "bunny": "^1.0.1",
    "canvas-fit": "^1.2.0",
    "gl-simplicial-complex": "^3.0.2",
    "gl-mat4": "^1.1.2"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mikolalysenko/3d-view-controls.git"
  },
  "keywords": [
    "camera",
    "webgl",
    "3d",
    "input",
    "handling",
    "view",
    "orbit",
    "turntable",
    "matrix",
    "graphics",
    "stackgl",
    "gl"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/3d-view-controls/issues"
  },
  "homepage": "https://github.com/mikolalysenko/3d-view-controls",
  "readme": "# 3d-view-controls\nAn easy to use 3D camera with input binding.\n\nDefault controls:\n\nButton | Interaction\n-------|------------\nLeft mouse | Rotate\nShift + left mouse *or* scroll horizontally | Roll\nRight mouse | Pan\nMiddle mouse *or* scroll vertically | Zoom\n\n# Example\n\nHere is a complete working example of how to use this module in an application:\n\n```javascript\nvar createCamera = require('3d-view-controls')\nvar bunny = require('bunny')\nvar perspective = require('gl-mat4/perspective')\nvar createMesh = require('gl-simplicial-complex')\n\nvar canvas = document.createElement('canvas')\ndocument.body.appendChild(canvas)\nwindow.addEventListener('resize', require('canvas-fit')(canvas))\n\nvar gl = canvas.getContext('webgl')\n\nvar camera = createCamera(canvas, {\n  eye:    [50,0,0],\n  center: [0,0,0],\n  zoomMax: 500\n})\n\nvar mesh = createMesh(gl, {\n  cells:      bunny.cells,\n  positions:  bunny.positions,\n  colormap:   'jet'\n})\n\nfunction render() {\n  requestAnimationFrame(render)\n  if(camera.tick()) {\n    gl.viewport(0, 0, canvas.width, canvas.height)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    gl.enable(gl.DEPTH_TEST)\n    mesh.draw({\n      projection: perspective([], Math.PI/4, canvas.width/canvas.height, 0.01, 1000),\n      view: camera.matrix\n    })\n  }\n}\nrender()\n```\n\n[You can try it out in your browser right now](https://mikolalysenko.github.io/3d-view-controls).\n\n# Install\n\n```\nnpm i 3d-view-controls\n```\n\n# API\n\n## Constructor\n\n#### `var camera = require('3d-view-controls')(element[, options])`\nCreates a new camera object.\n\n* `element` is a DOM node onto which this\n* `options` is an object with the following optional properties:\n    + `eye` - the position of the camera in world coordinates (Default `[0,0,10]`)\n    + `center` - the target of the camera in world coordinates (Default `[0,0,0]`)\n    + `up` - the up vector of the camera (Default `[0,1,0]`)\n    + `mode` - the interaction mode for the camera (Default `'orbit'`)\n    + `delay` - amount to delay interactions by for interpolation in ms (Default `16`)\n    + `rotateSpeed` - rotation scaling factor (Default `1`)\n    + `zoomSpeed` - zoom scaling factor (Default `1`)\n    + `translateSpeed` - translation/panning scale factor (Default `1`)\n    + `flipX` - flip X axis for rotations (Default `false`)\n    + `flipY` - flip Y axis for rotations (Default `false`)\n    + `zoomMin` - minimum zoom distance (Default `0.01`)\n    + `zoomMax` - maximum zoom distance (Default `Infinity`)\n\n## Geometric properties\n\nNote that you can update any property by assigning to it.  For example:\n\n```javascript\ncamera.eye = [100, 100, 100]\n\ncamera.matrix = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1]\n```\n\n#### `camera.matrix`\nA 4x4 matrix encoded as a length 16 array representing the homogeneous transformation from world coordinates to view (camera) coordinates.\n\n#### `camera.mode`\nThe current interaction mode for the camera.  Possible values include:\n\n* `orbit` - free orbiting mode\n* `turntable` - behaves like a turntable/gimbal\n* `matrix` - manual matrix control\n\n#### `camera.eye`\nThe position of the camera in world coordinates\n\n#### `camera.up`\nA vector pointing up in world coordinates\n\n#### `camera.center`\nThe target of the camera in world coordinates\n\n#### `camera.distance`\nEuclidean distance from `eye` to `center`\n\n## Methods\n\n#### `camera.tick()`\nUpdates the camera state.  Call this before each frame is rendered to compute the current state of the camera.\n\n**Returns** `true` if the state of the camera has changed since the last call to `tick`\n\n#### `camera.lookAt(center, eye, up)`\nSets the camera center/eye/up vector to look at a fixed target\n\n* `center` is the new center/target for the camera\n* `eye` is the position of the camera in world coordinates\n* `up` is a vector pointing up\n\n#### `camera.rotate(yaw, pitch, roll)`\nApplies an incremental rotation to the camera\n\n* `yaw` is the amount to rotate about the y-axis (in xz plane of camera)\n* `pitch` is the amount to rotate about the x-axis (in yz plane of camera)\n* `roll` is the amount to rotate about the forward axis (in xy plane of camera)\n\n#### `camera.pan(dx, dy, dz)`\nApplies a relative motion to the camera, moving in view coordinates\n\n* `dx,dy,dz` are the components of the camera motion vector\n\n#### `camera.translate(dx, dy, dz)`\nTranslates the camera in world coordinates\n\n* `dx,dy,dz` are the components of the translation vector\n\n## Tuning parameters\n\n#### `camera.distanceLimits`\nA 2D array representing the `[lo,hi]` bounds on the zoom distance.  Note that `0 < lo < hi`.\n\n#### `camera.flipX`\nA flag controlling whether the camera rotation is flipped along the x-axis\n\n#### `camera.flipY`\nA flag controlling whether the camera rotation is flipped along the y-axis\n\n#### `camera.delay`\nThe amount of delay on the interpolation of the camera state in ms\n\n#### `camera.rotateSpeed`\nCamera rotation speed scaling factor\n\n#### `camera.zoomSpeed`\nCamera zoom speed scaling factor\n\n#### `camera.translateSpeed`\nCamera translation speed scaling factor\n\n#### `camera.element`\nThe DOM element the camera is attached to\n\n# Future\n\nExpand to support more input types:\n\n* Touch\n* Keyboard\n* GamePad\n* VR?\n\n# License\n(c) 2015 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "_id": "3d-view-controls@2.1.1",
  "dist": {
    "shasum": "497ae788adae3aa188e549ebda7da4d1c9db73ba"
  },
  "_from": "3d-view-controls@^2.0.0",
  "_resolved": "https://registry.npmjs.org/3d-view-controls/-/3d-view-controls-2.1.1.tgz"
}
