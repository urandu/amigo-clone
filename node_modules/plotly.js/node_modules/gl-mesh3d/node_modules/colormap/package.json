{
  "name": "colormap",
  "version": "2.2.0",
  "description": "Great looking color maps",
  "author": {
    "name": "bpostlethwaite"
  },
  "dependencies": {
    "arraytools": "^1.1.2",
    "clone": "^1.0.2"
  },
  "devDependencies": {
    "color-space": "^1.14.3",
    "tap": "^5.1"
  },
  "files": [
    "index.js",
    "colorScales.js"
  ],
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js",
    "build": "browserify example/example.js -o example/bundle.js",
    "draw": "budo test/draw.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/9..latest",
      "chrome/20..latest",
      "firefox/13..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bpostlethwaite/colormap.git"
  },
  "keywords": [
    "colormap",
    "color map",
    "color",
    "hex",
    "rgb",
    "color-space",
    "cubehelix",
    "inferno",
    "magma",
    "plasma",
    "viridis",
    "matplotlib",
    "oceanography",
    "seismic",
    "color gradient",
    "color range",
    "colorscale",
    "color scale",
    "plot",
    "graph"
  ],
  "license": "MIT",
  "readme": "# Easy Javascript Colormaps\n\n[![Build Status](https://travis-ci.org/bpostlethwaite/colormap.png)](https://travis-ci.org/bpostlethwaite/colormap)\n\n![all colormap output](./example/colormaps.png)\n\n## Simple example\n\n```javascript\nvar colormap = require('colormap')\noptions = {\n  colormap: 'jet',   // pick a builtin colormap or add your own\n  nshades: 72,       // how many divisions\n  format: 'hex',     // \"hex\" or \"rgb\" or \"rgbaString\"\n  alpha: 1           // set an alpha value or a linear alpha mapping [start, end]\n}\ncg = colormap(options)\n```\n\nwhere leaving `options = {}` or `undefined` results in the defaults given above. There is a minimum number of `nshades` divisions you can select since the algorithms for each colormap have different requirements. `colormap` throws an error if there are too few divisions for the chosen colormap and gives the minimum number required. You should be safe with `n > 10` for all the colormaps, though some require much less (much simpler to implemenent).\n\n## Options\nThe colormap can be any of the supported builtin colormaps. Or you can add your own. For an example of how to add your own see the json format available at:\n\n```javascript\ncolorscales = require('colormap/colorScales')\n```\n\nColorscales are a sequence of objects containing an `index` and `rgb` key. The index defines how fast or slow the `rgb` values will change from one segment to the next. Ie.the steepness of the gradient between two segments. The `rgb` parameter can hold a length 3 or 4 array, depending if alpha values are included in the mapping.\n\n## Return values\nAn array of hex values ('hex') or an array of length 4 arrays containing rgba values ('rgb') or an rgba css string ('rgbaString').\n\n## Complete Example\nThis example will produce the colormap image used at top of this README. It uses all built in color maps and utilizes alpha channel mapping.\n\n```javascript\nvar cmap = require('./..'),\n    canvas = document.getElementById('canvas'),\n    img = document.getElementById('background'),\n    c = canvas.getContext('2d'),\n    n = 48,\n    colormaps = [\n        'jet', 'hsv','hot','cool','spring','summer','autumn','winter','bone',\n        'copper','greys','YIGnBu','greens','YIOrRd','bluered','RdBu','picnic',\n        'rainbow','portland','blackbody','earth','electric'\n    ];\n\nimg.onload = run;\n\nfunction drawColorMaps (colormap, name, height) {\n    /*\n     * Build up the color ranges and add text\n     */\n    for (var j = 0; j < n; j++) {\n        c.fillStyle = colormap[j];      // start ind at index 0\n        c.fillRect(j*10, height, 10, 40);\n\n    }\n    c.fillStyle = '#262626';\n    c.font = '16px Helvetica';\n    c.fillText( name, n*10 + 10, height + 26);\n}\n\nfunction run() {\n    var height, colormap;\n    c.canvas.height = colormaps.length * 40 + img.height;\n    c.canvas.width = 648;\n\n    for (var i = 0; i < colormaps.length; i++) {\n        height = i*40;\n        colormap = cmap({\n            colormap: colormaps[i],\n            nshades: n,\n            format: 'rgbaString'\n        });\n        drawColorMaps(colormap, colormaps[i], height);\n    }\n\n    /*\n     * Now lets try some alpha maps overtop an image!\n     */\n    var ilast = i;\n    c.drawImage(img, 0, i*40, 480, 240);\n\n    // remove background img\n    img.parentElement.removeChild(img);\n\n    for (var i = 0; i < colormaps.length; i++) {\n        height = (ilast + i)*40;\n        colormap = cmap({\n            colormap: colormaps[i],\n            nshades: n,\n            format: 'rgbaString',\n            alpha: [0, 1]\n        });\n        drawColorMaps(colormap, colormaps[i] + ' with transparency', height);\n    }\n}\n```\n\nThen just [browserify](https://github.com/substack/node-browserify) it and throw it in some html and it will output the image above!\n\n\n## Credits\n\nColor maps are inspired by [matplotlib](https://github.com/d3/d3-scale#sequential-color-scales) color scales, [cmocean](https://github.com/matplotlib/cmocean) oceanographic colormaps, [cosine gradients](https://github.com/thi-ng/color/blob/master/src/gradients.org) and others. Thanks to authors of these libs for their invaluable work.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bpostlethwaite/colormap/issues"
  },
  "homepage": "https://github.com/bpostlethwaite/colormap",
  "_id": "colormap@2.2.0",
  "dist": {
    "shasum": "244f6cb6f26845fef15aa2ca94176bac5ed3992a"
  },
  "_from": "colormap@^2.1.0",
  "_resolved": "https://registry.npmjs.org/colormap/-/colormap-2.2.0.tgz"
}
