{
  "name": "glsl-specular-beckmann",
  "version": "1.1.2",
  "description": "Beckmann specular distribution for GLSL",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "beefy example/example.js --open"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/glsl-specular-beckmann.git"
  },
  "keywords": [
    "beckmann",
    "specular",
    "distribution",
    "power",
    "glsl",
    "highlight",
    "shiny",
    "glslify"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/stackgl/glsl-specular-beckmann/issues"
  },
  "homepage": "https://github.com/stackgl/glsl-specular-beckmann",
  "devDependencies": {
    "a-big-triangle": "^1.0.0",
    "glslify": "^1.6.0",
    "beefy": "^2.1.1"
  },
  "browserify": {
    "transform": "glslify"
  },
  "readme": "# glsl-specular-beckmann\nComputes the specular power from the Beckmann distribution\n\n# Example\n\n```glsl\n#pragma glslify: beckmann = require(glsl-specular-beckmann)\n\nuniform vec3 eyePosition;\nuniform vec3 lightPosition;\n\nuniform float roughness;\n\nvarying vec3 surfacePosition;\nvarying vec3 surfaceNormal;\n\nvoid main() {\n  vec3 eyeDirection = normalize(eyePosition - surfacePosition);\n  vec3 lightDirection = normalize(lightPosition - surfacePosition);\n  vec3 normal = normalize(surfaceNormal);\n\n  float power = beckmann(lightDirection, viewDirection, normal, roughness);\n\n  gl_FragColor = vec4(power,power,power,1.0);\n}\n```\n\n# Usage\n\nInstall with npm:\n\n```\nnpm install glsl-specular-beckmann\n```\n\nThen use with [glslify](https://github.com/stackgl/glslify).\n\n# API\n\n```glsl\n#pragma glslify: beckmann = require(glsl-specular-beckmann)\n```\n\n##### `float beckmann(vec3 lightDir, vec3 eyeDir, vec3 normal, float shininess)`\nComputes the specular power in the Beckmann model\n\n* `lightDir` is a *unit length* `vec3` pointing from the surface point toward the light\n* `eyeDir` is a *unit length* `vec3` pointing from the surface point toward the camera\n* `normal` is the surface normal at the sample point\n* `roughness` is a parameter between 0 and 1 measuring the surface roughness.  Small values are shinier, larger values are rougher.\n\n**Returns** A `float` representing the specular power\n\n# License\n(c) 2014 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "_id": "glsl-specular-beckmann@1.1.2",
  "dist": {
    "shasum": "3f8a41641a5641bb127ff9a619cc815385dc8fa3"
  },
  "_from": "glsl-specular-beckmann@^1.1.1",
  "_resolved": "https://registry.npmjs.org/glsl-specular-beckmann/-/glsl-specular-beckmann-1.1.2.tgz"
}
