{
  "name": "glsl-specular-cook-torrance",
  "version": "2.0.1",
  "description": "Cook-Torrance specular/fresnel lighting term",
  "main": "index.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "beefy example/example.js --open"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stackgl/glsl-specular-cook-torrance.git"
  },
  "keywords": [
    "cook",
    "torrance",
    "specular",
    "light",
    "fresnel",
    "glsl",
    "glslify"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/stackgl/glsl-specular-cook-torrance/issues"
  },
  "homepage": "https://github.com/stackgl/glsl-specular-cook-torrance",
  "devDependencies": {
    "a-big-triangle": "^1.0.0",
    "glslify": "^1.6.0",
    "beefy": "^2.1.1"
  },
  "browserify": {
    "transform": "glslify"
  },
  "dependencies": {
    "glsl-specular-beckmann": "^1.1.1"
  },
  "readme": "# glsl-specular-cook-torrance\n\nComputes the specular power in the Cook-Torrance model.\n\n# Example\n\n```glsl\n#pragma glslify: cookTorranceSpec = require(glsl-specular-cook-torrance)\n\nuniform vec3 eyePosition;\nuniform vec3 lightPosition;\n\nuniform float roughness, fresnel;\n\nvarying vec3 surfacePosition, surfaceNormal;\n\nvoid main() {\n  //Light and view geometry\n  vec3 viewDirection = normalize(eyePosition - surfacePosition);\n  vec3 lightDirection = normalize(lightPosition - surfacePosition);\n\n  //Surface properties\n  vec3 normal = normalize(surfaceNormal);\n  \n  //Compute specular power\n  float power = cookTorranceSpec(\n    lightDirection, \n    viewDirection, \n    normal, \n    roughness,\n    fresnel);\n\n  gl_FragColor = vec4(power,power,power,1.0);\n}\n```\n\n# Usage\n\nInstall with npm:\n\n```\nnpm install glsl-specular-phong\n```\n\nThen use with [glslify](https://github.com/stackgl/glslify).\n\n# API\n\n```glsl\n#pragma glslify: cookTorrance = require(glsl-specular-cook-torrance)\n```\n\n##### `float cookTorrance(vec3 lightDir, vec3 eyeDir, vec3 normal, float roughness, float fresnel)`\nComputes the specular power in the Cook-Torrance\n\n* `lightDir` is a *unit length* `vec3` pointing from the surface point toward the light\n* `eyeDir` is a *unit length* `vec3` pointing from the surface point toward the camera\n* `normal` is the *unit length* surface normal at the sample point\n* `roughness` is the surface roughness parameter, between 0 and 1.  0 means surface is perfectly smooth, 1 means surface is matte\n* `fresnel` the Fresnel exponent.  0 = no Fresnel, higher values create a rim effect around objects\n\n**Returns** A `float` representing the specular power\n\n**Note** Unlike the usual Cook-Torrance model, the light power is not scaled by 1/(normal . lightDirection).  This avoids an unnecessary numerically unstable division, but requires modifying how diffuse light is calculated.\n\n# License\n(c) 2014 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "_id": "glsl-specular-cook-torrance@2.0.1",
  "dist": {
    "shasum": "5cb73d197aa8b146123a58ab7ae8f402c7821170"
  },
  "_from": "glsl-specular-cook-torrance@^2.0.1",
  "_resolved": "https://registry.npmjs.org/glsl-specular-cook-torrance/-/glsl-specular-cook-torrance-2.0.1.tgz"
}
