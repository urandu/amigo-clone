{
  "name": "polytope-closest-point",
  "version": "1.0.0",
  "description": "Computes the closest point to a polytope in arbitrary dimensions",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "numeric": "^1.2.6"
  },
  "devDependencies": {
    "tap": "~0.4.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/polytope-closest-point.git"
  },
  "keywords": [
    "polytope",
    "geometry",
    "closest",
    "point",
    "triangle",
    "line",
    "segment",
    "polygon",
    "polyhedra",
    "convex",
    "math",
    "3d"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "BOOST",
  "readmeFilename": "README.md",
  "gitHead": "bb0d7df62f074dfb2354b04aa414e29083deb98a",
  "readme": "polytope-closest-point\n======================\nComputes the closest point in a convex polytope to a given point.\n\nInstall\n=======\nUsing npm, type the following command into your shell:\n\n    npm install polytope-closest-point\n\nUsage\n=====\nHere is an example of how to find the closest point to a triangle in a mesh:\n\n    var mesh = require(\"bunny\");\n    var result = new Array(3);\n    var sqr_distance = require(\"polytope-closest-point\")(\n                          mesh.cells[0],\n                          mesh.positions,\n                          [0,0,0],\n                          result);\n\nWhich computes the closest point in the first facet of the mesh to the point `[0,0,0]`, storing the resulting point in `result` and the squared distance in `sqr_distance`.\n\nFor more examples, see test/simple.js.\n\n### `require(\"polytope-closest-point\")(cell, positions, x[, result])`\n\nComputes the closest point in a polytope to `x`, storing the result in `result`.\n\n* `cell` is a list of indices into a positions representing the vertices of the polytope.\n* `positions` is an array of tuples representing the vertices of the polytope\n* `x` is the point we are querying against\n* `result` (optional) is the array to store the closest point in.\n\nReturns a float representing the squared Euclidean distance from x to the polytope.  If no such point can be found, it returns Number.NaN\n\nNotes:  For polytopes with fewer than 4 vertices, the code uses hand optimized routines derived from WildMagick.  For higher dimensions, it falls back to a general purpose quadratic programming solver that is ported from somewhat slower R/FORTRAN codes.  If you are planning on using this code to do distance queries on meshed surfaces, it is recommend you triangulate all your polygons first.\n\nCredits\n=======\nTriangle/tetrahedra closest point code derived from WildMagick (c) David Eberly 1998-2012.\n\nOther dimensions, (c) 2013 Mikola Lysenko\n\nBOOST License.\n",
  "bugs": {
    "url": "https://github.com/mikolalysenko/polytope-closest-point/issues"
  },
  "homepage": "https://github.com/mikolalysenko/polytope-closest-point",
  "_id": "polytope-closest-point@1.0.0",
  "dist": {
    "shasum": "ca9653269081e179040a60ea38cdf715838e801d"
  },
  "_from": "polytope-closest-point@^1.0.0",
  "_resolved": "https://registry.npmjs.org/polytope-closest-point/-/polytope-closest-point-1.0.0.tgz"
}
