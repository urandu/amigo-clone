{
  "name": "gl-mesh3d",
  "version": "1.2.0",
  "description": "3D mesh drawing",
  "main": "mesh.js",
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "barycentric": "^1.0.1",
    "colormap": "^2.1.0",
    "gl-buffer": "^2.0.8",
    "gl-mat4": "^1.0.0",
    "gl-shader": "^4.0.5",
    "gl-texture2d": "^2.0.8",
    "gl-vao": "^1.1.3",
    "glsl-specular-cook-torrance": "^2.0.1",
    "glslify": "^2.1.2",
    "ndarray": "^1.0.15",
    "normals": "^1.0.1",
    "polytope-closest-point": "^1.0.0",
    "simplicial-complex-contour": "^1.0.0",
    "typedarray-pool": "^1.1.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gl-vis/gl-mesh3d.git"
  },
  "keywords": [
    "webgl",
    "simplicial",
    "complex",
    "debug",
    "simple"
  ],
  "browserify": {
    "transform": [
      "glslify"
    ]
  },
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gl-vis/gl-mesh3d/issues"
  },
  "readme": "gl-mesh3d\n=====================\nVisualization module for meshes/point clouds/graphs.\n\n# Example\n\n```javascript\nvar createScene = require('gl-plot3d')\nvar createMesh  = require('gl-mesh3d')\nvar bunny       = require('bunny')\n\nvar scene = createScene()\n\nvar mesh = createMesh({\n  gl:         scene.gl,\n  cells:      bunny.cells,\n  positions:  bunny.positions,\n  colormap:   'jet'\n})\n\nscene.add(mesh)\n```\n\n[Try out the example in your browser](http://gl-vis.github.io/gl-mesh3d/)\n\n# Install\n\n```\nnpm i gl-mesh3d\n```\n    \n# Basic interface\n\n## Constructor\n\n#### `var mesh = require('gl-mesh3d')(params)`\nCreates a simplicial complex that can be drawn directly in a WebGL context.\n\n* `params` is an object that has the following properties:\n\n    + `gl` A reference to the WebGL context\n    + `cells` *(Required)* An indexed list of vertices, edges and/or faces.\n    + `positions` *(Required)* An array of positions for the mesh, encoded as arrays\n    + `vertexColors` A list of per vertex color attributes encoded as length 3 rgb arrays\n    + `vertexUVs`\n    + `cellUVs`\n    + `vertexIntensity`\n    + `cellIntensity`\n    + `cellColors` A list of per cell color attributes\n    + `meshColor` A constant color for the entire mesh\n    + `vertexNormals` An array of per vertex normals\n    + `cellNormals` An array of per cell normals\n    + `useFacetNormals` A flag which if set to `true` forces `cellNormals` to be computed\n    + `pointSizes` An array of point sizes\n    + `pointSize` A single point size float\n    + `ambientLight` ambient light color * intensity\n    + `diffuseLight` diffuse light color * intensity\n    + `specularLight` specular light color\n    + `lightPosition` location of light\n    + `roughness` surface roughness\n    + `fresnel` surface glossiness/\"rim light\" factor\n    + `opacity` surface opacity\n\n**Returns** A renderable mesh object\n\n## Update\n\n#### `mesh.update(params)`\nUpdates the contents of the simplicial complex in place.\n\n* `params` is a list of parameters which are in the same format as the constructor\n\n## Properties\n\n#### `mesh.lightPosition`\nThe 3D position of the directional light source\n\n#### `mesh.ambientLight`\nAmbient light color\n\n#### `mesh.diffuseLight`\nDiffuse light color\n\n#### `mesh.specularLight`\nSpecular light color\n\n#### `mesh.roughness`\nMesh surface roughness\n\n#### `mesh.fresnel`\nFresnel parameter\n\n#### `mesh.vertexNormalsEpsilon`\nEpsilon for vertex normals calculation\n\n#### `mesh.faceNormalsEpsilon`\nEpsilon for face normals calculation\n\n#### `mesh.opacity`\nOpacity\n\n# Credits\n(c) 2013-2015 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/gl-vis/gl-mesh3d",
  "_id": "gl-mesh3d@1.2.0",
  "dist": {
    "shasum": "0d8784c81da058a7700c92802b190b19c2736db4"
  },
  "_from": "gl-mesh3d@^1.0.7",
  "_resolved": "https://registry.npmjs.org/gl-mesh3d/-/gl-mesh3d-1.2.0.tgz"
}
