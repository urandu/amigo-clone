{
  "name": "gl-mat4",
  "version": "1.1.4",
  "description": "gl-matrix's mat4, split into smaller pieces",
  "main": "index.js",
  "scripts": {
    "get-docs": "cat *.js | dox --api"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/stackgl/gl-mat4"
  },
  "keywords": [
    "gl-matrix",
    "matrix",
    "math",
    "gl",
    "mat4",
    "mat4x4",
    "4x4",
    "mat",
    "vector",
    "maths"
  ],
  "license": "Zlib",
  "contributors": [
    {
      "name": "Brandon Jones",
      "email": "tojiro@gmail.com"
    },
    {
      "name": "Colin MacKenzie IV",
      "email": "sinisterchipmunk@gmail.com"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "dox": "git://github.com/hughsk/dox#api-context"
  },
  "bugs": {
    "url": "https://github.com/stackgl/gl-mat4/issues"
  },
  "homepage": "https://github.com/stackgl/gl-mat4",
  "readme": "# gl-mat4 [![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nPart of a fork of [@toji](http://github.com/toji)'s\n[gl-matrix](http://github.com/toji/gl-matrix) split into smaller pieces: this\npackage contains `glMatrix.mat4`.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/gl-mat4.png)](https://nodei.co/npm/gl-mat4/)\n\n### `mat4 = require('gl-mat4')`\n\nWill load all of the module's functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.\n\nFor example, the following are equivalent:\n\n``` javascript\nvar scale = require('gl-mat4').scale\nvar scale = require('gl-mat4/scale')\n```\n\n## API\n\n  - [adjoint()](#adjointoutmat4-amat4)\n  - [clone()](#cloneamat4)\n  - [copy()](#copyoutmat4-amat4)\n  - [create()](#create)\n  - [determinant()](#determinantamat4)\n  - [fromQuat()](#fromquatoutmat4-qquat4)\n  - [fromRotationTranslation()](#fromrotationtranslationoutmat4-qquat4-vvec3)\n  - [frustum()](#frustumoutmat4-leftnumber-rightnumber-bottomnumber-topnumber-nearnumber-farnumber)\n  - [identity()](#identityoutmat4)\n  - [invert()](#invertoutmat4-amat4)\n  - [lookAt()](#lookatoutmat4-eyevec3-centervec3-upvec3)\n  - [multiply()](#multiplyoutmat4-amat4-bmat4)\n  - [ortho()](#orthooutmat4-leftnumber-rightnumber-bottomnumber-topnumber-nearnumber-farnumber)\n  - [perspective()](#perspectiveoutmat4-fovynumber-aspectnumber-nearnumber-farnumber)\n  - [perspectiveFromFieldOfView()](#perspectivefromfieldofviewoutmat4-fovobject-nearnumber-farnumber)\n  - [rotate()](#rotateoutmat4-amat4-radnumber-axisvec3)\n  - [rotateX()](#rotatexoutmat4-amat4-radnumber)\n  - [rotateY()](#rotateyoutmat4-amat4-radnumber)\n  - [rotateZ()](#rotatezoutmat4-amat4-radnumber)\n  - [scale()](#scaleoutmat4-amat4-vvec3)\n  - [str()](#strmatmat4)\n  - [translate()](#translateoutmat4-amat4-vvec3)\n  - [transpose()](#transposeoutmat4-amat4)\n\n## adjoint(out:mat4, a:mat4)\n\n  Calculates the adjugate of a mat4\n\n## clone(a:mat4)\n\n  Creates a new mat4 initialized with values from an existing matrix\n\n## copy(out:mat4, a:mat4)\n\n  Copy the values from one mat4 to another\n\n## create()\n\n  Creates a new identity mat4\n\n## determinant(a:mat4)\n\n  Calculates the determinant of a mat4\n\n## fromQuat(out:mat4, q:quat4)\n\n  Creates a matrix from a quaternion rotation.\n\n## fromRotationTranslation(out:mat4, q:quat4, v:vec3)\n\n  Creates a matrix from a quaternion rotation and vector translation\n  This is equivalent to (but much faster than):\n  \n```js\n  mat4.identity(dest);\n  mat4.translate(dest, vec);\n  var quatMat = mat4.create();\n  quat4.toMat4(quat, quatMat);\n  mat4.multiply(dest, quatMat);\n```\n\n## frustum(out:mat4, left:Number, right:Number, bottom:Number, top:Number, near:Number, far:Number)\n\n  Generates a frustum matrix with the given bounds\n\n## identity(out:mat4)\n\n  Set a mat4 to the identity matrix\n\n## invert(out:mat4, a:mat4)\n\n  Inverts a mat4\n\n## lookAt(out:mat4, eye:vec3, center:vec3, up:vec3)\n\n  Generates a look-at matrix with the given eye position, focal point, and up axis\n\n## multiply(out:mat4, a:mat4, b:mat4)\n\n  Multiplies two mat4's\n\n## ortho(out:mat4, left:number, right:number, bottom:number, top:number, near:number, far:number)\n\n  Generates a orthogonal projection matrix with the given bounds\n\n## perspective(out:mat4, fovy:number, aspect:number, near:number, far:number)\n\n  Generates a perspective projection matrix with the given bounds\n\n## perspectiveFromFieldOfView(out:mat4, fov:object, near:number, far:number)\n\n  Generates a perspective projection matrix with the given field of view.\n\n## rotate(out:mat4, a:mat4, rad:Number, axis:vec3)\n\n  Rotates a mat4 by the given angle\n\n## rotateX(out:mat4, a:mat4, rad:Number)\n\n  Rotates a matrix by the given angle around the X axis\n\n## rotateY(out:mat4, a:mat4, rad:Number)\n\n  Rotates a matrix by the given angle around the Y axis\n\n## rotateZ(out:mat4, a:mat4, rad:Number)\n\n  Rotates a matrix by the given angle around the Z axis\n\n## scale(out:mat4, a:mat4, v:vec3)\n\n  Scales the mat4 by the dimensions in the given vec3\n\n## str(mat:mat4)\n\n  Returns a string representation of a mat4\n\n## translate(out:mat4, a:mat4, v:vec3)\n\n  Translate a mat4 by the given vector\n\n## transpose(out:mat4, a:mat4)\n\n  Transpose the values of a mat4\n\n## License\n\n[zlib](http://en.wikipedia.org/wiki/Zlib_License). See [LICENSE.md](https://github.com/stackgl/gl-mat4/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "_id": "gl-mat4@1.1.4",
  "dist": {
    "shasum": "20be0120fc4f4c745d60f6adc1da4f7c717765d5"
  },
  "_from": "gl-mat4@^1.1.2",
  "_resolved": "https://registry.npmjs.org/gl-mat4/-/gl-mat4-1.1.4.tgz"
}
