{
  "name": "jxon",
  "version": "2.0.0-beta.2",
  "description": "A complete, bidirectional, JXON library",
  "keywords": [
    "jxon",
    "bidirectional",
    "loseless",
    "badgerfish",
    "parker convention",
    "xml to js",
    "xml2js",
    "xml to json",
    "xml2json",
    "js to xml",
    "js2xml",
    "json to xml",
    "json2xml"
  ],
  "main": "index.js",
  "scripts": {
    "pretest": "npm ls --depth=Infinity > /dev/null",
    "test": "npm run test-node && npm run test-webkit",
    "test-node": "mocha test/spec.js",
    "test-webkit": "browserify test/spec.js > test/spec.browserify.js && mocha-phantomjs test/index.html"
  },
  "author": {
    "name": "MDN",
    "url": "https://developer.mozilla.org/en-US/docs/JXON"
  },
  "contributors": [
    {
      "name": "Martin Raifer",
      "email": "tyr.asd@gmail.com"
    },
    {
      "name": "Igor Dimitrijevic",
      "email": "igor@ground.gr"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/tyrasd/jxon.git"
  },
  "license": "GPL v3",
  "dependencies": {
    "xmldom": "^0.1.21"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "chai": "^3.4.1",
    "mocha": "~2.1.0",
    "mocha-phantomjs": "^4.0.2"
  },
  "browser": {
    "xmldom": false
  },
  "readme": "JXON [![Build Status](https://secure.travis-ci.org/tyrasd/jxon.svg)](https://travis-ci.org/tyrasd/jxon)\n====\n\nA complete, bidirectional, JXON (lossless JavaScript XML Object Notation) library. Packed as UMD.\n\nImplementation of Mozilla's [JXON](https://developer.mozilla.org/en-US/docs/JXON) code. Head over to MDN for [Documentation](https://developer.mozilla.org/en-US/docs/JXON#Usage).\n\n\n#### Example:\n\n```js\n{name: 'myportal'} \n<name>myportal</name>\n\n{user: {\n    username: 'testUser1',\n    password: 'yolo',\n    enabled: true\n}}\n<user>\n  <username>testUser1</username>\n  <password>yolo</password>\n  <enabled>true</enabled>\n</user>\n\n{tag: {\n    $type: 'regular'\n    $blacklist: false\n    _: 'Backbase'\n}}\n<tag type=\"regular\" blacklist=\"false\">Backbase</tag>\n\n{dogs: {\n    name: ['Charlie', {$nick: 'yes', _:'Mad Max'}]\n}}\n<dogs>\n    <name>Charlie</name>\n    <name nick=\"yes\">Mad Max</name>\n</dogs>\n```\n\n# API\n\n### .config(cnf)\n**Overrides default configuration properties**\n- cnf - Object with configuration properties.\n\n_Defaults:_\n\n```js\nvalueKey: '_',\nattrKey: '$',\nattrPrefix: '$',\nlowerCaseTags: false,\ntrueIsEmpty: false,\nautoDate: false,\nignorePrefixedNodes: false,\nparseValues: false,\nparserErrorHandler: undefined\n```\n\n### .stringToJs(xmlString)\n**Converts XML string to JS object.**\n- xmlString - XML string to convert to JXON notation JS object\n\n### .jsToString(obj)\n**Converts JS object to XML string.**\n- obj - JS object in JXON notation to convert to XML string\n\n### .xmlToJs(xmlDocument, verbosity, freeze, nestedAttributes)\n**Converts XML document to JS object. _Alias: JXON.build_**\n- xmlDocument - The XML document to be converted into JavaScript Object.\n- verbosity - Optional verbosity level of conversion, from 0 to 3. It is almost equivalent to our algorithms from #4 to #1 (default value is 1, which is equivalent to the algorithm #3).\n- freeze - Optional boolean expressing whether the created object must be freezed or not (default value is false).\n- nestedAttributes - Optional boolean expressing whether the the nodeAttributes must be nested into a child-object named keyAttributes or not (default value is false for verbosity levels from 0 to 2; true for verbosity level 3).\n \nExample:\n```js\nvar myObject = JXON.build(xmlDoc);\n```\n### .jsToXml(obj, namespaceURI, qualifiedNameStr, documentType)\n**Converts JS object to XML document. _Alias: JXON.unbuild_**\n- obj - The JavaScript Object from which you want to create your XML Document.\n- namespaceURI - Optional DOMString containing the namespace URI of the document to be created, or null if the document doesn't belong to one.\n- qualifiedNameStr - Optional DOMString containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.\n- documentType - Optional DocumentType of the document to be created. It defaults to null.\n \nExample:\n```js\nvar myObject = JXON.unbuild(myObject);\n```\n\n### .stringToXml(xmlString)\n**Implementation of DOMParser.parseFromString, converts string to XML document.**\n- xmlString - XML string to convert to XML document\n\n### .xmlToString(xmlObj)\n**Implementation of XMLSerializer.serializeToString, converts XML document to string.**\n- xmlObj - XML document to convert to XML string\n\n### .each(obj, callback[, thisArg])\n**Helper method to iterate node(s).**  \nIn case that there is only one children node, JXON will return object. For multiple children it will return array. This method will always iterate nodes as array.\n- obj - array or object to iterate\n- callback - function to execute for each element\n- thisArg - optional. Value to use as this when eecuting callback\n\nExample:\n```js\nvar jx = jxon.stringToJs('<val>foo</val>');\njxon.each(jx.val, function(val) {\n    assert(val, 'foo');\n});\n```\n\n# CHANGELOG\n\n## 2.0.0\n\nchanges from version 1.x to 2.0 include:\n\n* (breaking:) more usefull default settings (see above)\n* (breaking:) stringify Dates to ISO format instead of GMT\n* improved xml namespace handling on node and browsers\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tyrasd/jxon/issues"
  },
  "homepage": "https://github.com/tyrasd/jxon",
  "_id": "jxon@2.0.0-beta.2",
  "dist": {
    "shasum": "d277cfe5ac52ed6b17a98fdd4741a3f6b752eac3"
  },
  "_from": "jxon@2.0.0-beta.2",
  "_resolved": "https://registry.npmjs.org/jxon/-/jxon-2.0.0-beta.2.tgz"
}
